% Seeker Optimition Algorithm for f(x1,x2) optimum
clc % 清屏
clear all; % 删除workplace变量
close all; % 关掉显示图形窗口
tic
format long
% Parameters
sizepop=100;%种群规模
maxgen=1000;%最大迭代次数
m=30;%空间维数
Umax=0.9500;%最大隶属度值
Umin=0.0111;%最小隶属度值
Wmax=0.8;%权重最大值
Wmin=0.2;%权重最小值
popmax=100;
popmin=-100;
% 初始化种群个体
for i=1:sizepop
    pop(i,:)=popmax*rands(1,m);
    %fitness(i)=Sphere(pop(i,:));% 计算适应度
    fitness(i)=sum (pop(i,:).^2);
end
%寻找具有最好适应度的个体
[bestfitness bestindex]=min(fitness);
zbest=pop(bestindex,:);   %全局最佳
gbest=pop;    %个体最佳
fitnessgbest=fitness;   %个体最佳适应度值
fitnesszbest=bestfitness;   %全局最佳适应度值
%%迭代寻优
Di=0*rand(sizepop,m);
Di(1,:)=1;
Buchang=0*rand(sizepop,m);
C=0*rand(sizepop,m);
Diego=0*rand(sizepop,m);
Dialt=0*rand(sizepop,m);
Dipro=0*rand(sizepop,m);
yy(1)=fitnesszbest;
for t=2:maxgen
    for i=1:sizepop
        W=Wmax-t*(Wmax-Wmin)/maxgen;
        Diego(i,:)=sign(gbest(i,:) - pop(i,:));%确定利己方向
        Dialt(i,:)=sign(zbest - pop(i,:));%确定利他方向
        if Sphere(gbest(i,:))>=Sphere(pop(i,:))%确定预动方向
            Dipro(i,:)=-Di(i,:);
        else
            Dipro(i,:)=Di(i,:);
        end
        Di(i,:)=sign(W* Dipro(i,:)+rand*Diego(i,:)+rand*Dialt(i,:));%确定经验梯度方向
        [Orderfitnessgbest,Indexfitnessgbest]=sort(fitnessgbest,'descend');
        u=Umax-(sizepop-Indexfitnessgbest(i))*(Umax-Umin)/(sizepop-1);
        U=u+(1-u)*rand;
        H(t)=(maxgen-t)/maxgen;%迭代过程中权重的变化
        C(i,:)=H(t)*abs(zbest-5*rands(1,m));%确定高斯函数的参数
        T=sqrt(-log(U));
        Buchang(i,:)=C(i,:)*T;%确定搜索不长的大小
        Buchang(i,find(Buchang(i,:)>3*max(C(i,:))))=3*max(C(i,:));
        Buchang(i,find(Buchang(i,:)<0))=0;
        %更新位置
        pop(i,:)=pop(i,:)+Di(i,:).*Buchang(i,:);
        pop(i,find(pop(i,:)>popmax))=popmax;
        pop(i,find(pop(i,:)<popmin))=popmin;
        fitness(i)=Sphere(pop(i,:));%计算适应度值
        %个体最优更新
        if fitness(i) < fitnessgbest(i)
            gbest(i,:) = pop(i,:);
            fitnessgbest(i) = fitness(i);
        end
         %群体最优更新
        if fitness(i) < fitnesszbest
            zbest = pop(i,:);
            fitnesszbest = fitness(i);
        end
    end
    yy(t)=fitnesszbest;     
end
yy_min=min(yy);
    	save SOA_Fitness.txt yy -ascii -tabs;
%% 结果分析
plot(yy,'LineWidth',2)
title(['Global Best Fitness  ' 'SOA-Minimum value＝' num2str(fitnesszbest)]);
grid on
xlabel('Number of Iterations');ylabel('Global Fitness in log scale');

%display(['The best solution obtained by SOA is \m ', num2str(Best_pos)]);
display(['The best optimal value of the objective funciton found by SOA is \n ', num2str(yy_min)]);     
toc;
